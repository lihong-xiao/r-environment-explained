[
  {
    "objectID": "r-environment-slides.html",
    "href": "r-environment-slides.html",
    "title": "R Environment Explained",
    "section": "",
    "text": "What is an Environment?\n\nA Container: It holds R objects, like variables (x &lt;- 10) and functions (my_func &lt;- function(...) {...}). Each object has a unique name within that environment.\nA Pointer to a Parent: Crucially, every environment has a parent environment. This “parent” pointer is what creates the chain. There is only one exception: the R_EmptyEnv, which has no parent and acts as the end of every chain.\n\nKey Concepts of an Environment\n\nName-Object Bindings: Every name must be unique and not ordered.\nReference Semantics: Environments are not copied when modified.\nParent Environment (Hierarchy)\n\n\n\n\nFor creating an environment\nenv_01 &lt;- new.env()\n\nenv_01$var_01 &lt;- 1\nenv_01$var_02 &lt;- TRUE\nenv_01$var_03 &lt;- \"TRUE\"\nprint(env_01$var_01)\n\nenv_02&lt;-env_01\nenv_02\nenv_02$var_03 &lt;- \"FALSE\"\nenv_01$var_03 \n\nenv_01[[\"var_03\"]]\n\nget(\"var_03\", envir = env_01)\nget(\"var_04\", envir = env_01)\nget(c(\"var_01\", \"var_02\"), envir = env_01)\n\nmget(c(\"var_04\", \"var_03\",\"var_05\"), envir = env_01,ifnotfound = NA)\n\n\nget0(\"var_04\", envir = env_01, inherits = TRUE, ifnotfound = NULL)\nexists(\"var_04\", envir = env_01, inherits = TRUE)\n\nls(envir = env_01)\nmget(ls(envir = env_01), envir = env_01)\n\ntest_func &lt;- function(){\n    x = 1\n    ls()\n}\ntest_func()\n\nparent.env(env_01)\nparent.env(parent.env(env_01))\n\n\n\n\n\n\n%let g_var = Global;\n%macro outer_macro;\n  %local o_var;\n  %let o_var = Outer;\n  %macro inner_macro;\n    %local i_var;\n    %let i_var = Inner;\n    %put --- Inside inner_macro ---;\n    %put i_var = &i_var;\n    %put o_var = &o_var;\n    %put g_var = &g_var;\n  %mend inner_macro;\n  %inner_macro;\n%mend outer_macro;\n%outer_macro;\n\n\n\n\n\n\nFlowchart illustrating the SAS macro variable resolution process.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFeatures\nDetails\n\n\n\n\nBasis\nLexical Scoping\n\n\nLookup Rules\nStatic (based on function definition)\n\n\nLocal Variable Lifecycle\nTied to the function’s environment\n\n\nCore Mechanism\n1. Check self -&gt; 2. Check parent envs\n\n\n\n\n\n\n\n\n\n\n\n\n\nFeatures\nDetails\n\n\n\n\nBasis\nGlobal/Local Symbol Table\n\n\nLookup Rules\nDynamic (based on call chain)\n\n\nLocal Variable Lifecycle\nBound to a single macro execution\n\n\nCore Mechanism\n1. Check self -&gt; 2. Check caller -&gt; 3. Check global\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nxpt_path = SDD\nvariable_metadata = get0(\"pmetsdtm.variable\")\n\n\n\n\n\n\n\nA code snippet showing variable metadata being used in a function.\n\n\n\n\n\n\n\n\n\n\n\nA flowchart showing the chain of linked environments in R, from the Global Environment down to the Empty Environment.\n\n\n\n\nChains of Linked Environments\nsearch()\nparent.env(parent.env(environment(sd)))\nparent.env(parent.env(parent.env(environment(sd))))\n\n\n\n\n\n\n\n\n\n\n\n\nFeatures\nR Environment Scope Details\n\n\n\n\nBasis\nChains of Linked Environments\n\n\nLookup Rules\nLexical (Based on function definition environment)\n\n\nLocal Variable Lifecycle\nBound to a single function call (Execution Environment)\n\n\nCore Mechanism\n1. Check current (execution) -&gt; 2. Check enclosing (definition) -&gt; 3. Follow parent chain to global, to search path, to EmptyEnv\n\n\n\n\n\n\n\n\n\n\n\nCore Idea: When a variable is defined within a function, the “birthplace” of the function takes precedence over the “call location” when determining its scope.\nMechanism: When a function needs to search for a variable during execution, it first looks in its own execution environment. If not found, it goes to its parent environment (the environment where it was defined), and then continues upwards along the chain of parent environments until the global environment and search path are reached.\nAdvantages/Disadvantages:\n\nAdvantages: Results are stable and predictable. A function’s behavior is independent of different calling contexts, which makes code easier to reason about.\nDisadvantages: not flexible\n\n\n\n\n\n\nCore Idea: When a variable is defined within a macro, its “calling context” is crucial for determining its scope.\nMechanism: When a macro needs to search for a variable during execution, it first looks in its own local symbol table. If not found, it goes to the local symbol table of its calling environment, then follows the call chain, and finally searches the global symbol table.\nAdvantages/Disadvantages:\n\nAdvantages: This method is very flexible; you can change the behavior of the macro by manipulating the calling environment.\nDisadvantages: However, it also brings risks; the macro’s behavior can have unexpected side effects due to different calling contexts, and the predictability of the code is lower.\n\n\n\n\n\n\n\n\n\nQ: How does R find a variable? &gt; R replies: “First, I look if I have it. If not, I go to my birthplace to find it.”\nQ: How does SAS find a variable? &gt; SAS replies: “First, I look if I have it. If not, I go to where I was called from to find it.”"
  },
  {
    "objectID": "r-environment-slides.html#how-r-to-find-objects",
    "href": "r-environment-slides.html#how-r-to-find-objects",
    "title": "R Environment Explained",
    "section": "",
    "text": "What is an Environment?\n\nA Container: It holds R objects, like variables (x &lt;- 10) and functions (my_func &lt;- function(...) {...}). Each object has a unique name within that environment.\nA Pointer to a Parent: Crucially, every environment has a parent environment. This “parent” pointer is what creates the chain. There is only one exception: the R_EmptyEnv, which has no parent and acts as the end of every chain.\n\nKey Concepts of an Environment\n\nName-Object Bindings: Every name must be unique and not ordered.\nReference Semantics: Environments are not copied when modified.\nParent Environment (Hierarchy)\n\n\n\n\nFor creating an environment\nenv_01 &lt;- new.env()\n\nenv_01$var_01 &lt;- 1\nenv_01$var_02 &lt;- TRUE\nenv_01$var_03 &lt;- \"TRUE\"\nprint(env_01$var_01)\n\nenv_02&lt;-env_01\nenv_02\nenv_02$var_03 &lt;- \"FALSE\"\nenv_01$var_03 \n\nenv_01[[\"var_03\"]]\n\nget(\"var_03\", envir = env_01)\nget(\"var_04\", envir = env_01)\nget(c(\"var_01\", \"var_02\"), envir = env_01)\n\nmget(c(\"var_04\", \"var_03\",\"var_05\"), envir = env_01,ifnotfound = NA)\n\n\nget0(\"var_04\", envir = env_01, inherits = TRUE, ifnotfound = NULL)\nexists(\"var_04\", envir = env_01, inherits = TRUE)\n\nls(envir = env_01)\nmget(ls(envir = env_01), envir = env_01)\n\ntest_func &lt;- function(){\n    x = 1\n    ls()\n}\ntest_func()\n\nparent.env(env_01)\nparent.env(parent.env(env_01))\n\n\n\n\n\n\n%let g_var = Global;\n%macro outer_macro;\n  %local o_var;\n  %let o_var = Outer;\n  %macro inner_macro;\n    %local i_var;\n    %let i_var = Inner;\n    %put --- Inside inner_macro ---;\n    %put i_var = &i_var;\n    %put o_var = &o_var;\n    %put g_var = &g_var;\n  %mend inner_macro;\n  %inner_macro;\n%mend outer_macro;\n%outer_macro;\n\n\n\n\n\n\nFlowchart illustrating the SAS macro variable resolution process.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFeatures\nDetails\n\n\n\n\nBasis\nLexical Scoping\n\n\nLookup Rules\nStatic (based on function definition)\n\n\nLocal Variable Lifecycle\nTied to the function’s environment\n\n\nCore Mechanism\n1. Check self -&gt; 2. Check parent envs\n\n\n\n\n\n\n\n\n\n\n\n\n\nFeatures\nDetails\n\n\n\n\nBasis\nGlobal/Local Symbol Table\n\n\nLookup Rules\nDynamic (based on call chain)\n\n\nLocal Variable Lifecycle\nBound to a single macro execution\n\n\nCore Mechanism\n1. Check self -&gt; 2. Check caller -&gt; 3. Check global\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nxpt_path = SDD\nvariable_metadata = get0(\"pmetsdtm.variable\")\n\n\n\n\n\n\n\nA code snippet showing variable metadata being used in a function.\n\n\n\n\n\n\n\n\n\n\n\nA flowchart showing the chain of linked environments in R, from the Global Environment down to the Empty Environment.\n\n\n\n\nChains of Linked Environments\nsearch()\nparent.env(parent.env(environment(sd)))\nparent.env(parent.env(parent.env(environment(sd))))\n\n\n\n\n\n\n\n\n\n\n\n\nFeatures\nR Environment Scope Details\n\n\n\n\nBasis\nChains of Linked Environments\n\n\nLookup Rules\nLexical (Based on function definition environment)\n\n\nLocal Variable Lifecycle\nBound to a single function call (Execution Environment)\n\n\nCore Mechanism\n1. Check current (execution) -&gt; 2. Check enclosing (definition) -&gt; 3. Follow parent chain to global, to search path, to EmptyEnv\n\n\n\n\n\n\n\n\n\n\n\nCore Idea: When a variable is defined within a function, the “birthplace” of the function takes precedence over the “call location” when determining its scope.\nMechanism: When a function needs to search for a variable during execution, it first looks in its own execution environment. If not found, it goes to its parent environment (the environment where it was defined), and then continues upwards along the chain of parent environments until the global environment and search path are reached.\nAdvantages/Disadvantages:\n\nAdvantages: Results are stable and predictable. A function’s behavior is independent of different calling contexts, which makes code easier to reason about.\nDisadvantages: not flexible\n\n\n\n\n\n\nCore Idea: When a variable is defined within a macro, its “calling context” is crucial for determining its scope.\nMechanism: When a macro needs to search for a variable during execution, it first looks in its own local symbol table. If not found, it goes to the local symbol table of its calling environment, then follows the call chain, and finally searches the global symbol table.\nAdvantages/Disadvantages:\n\nAdvantages: This method is very flexible; you can change the behavior of the macro by manipulating the calling environment.\nDisadvantages: However, it also brings risks; the macro’s behavior can have unexpected side effects due to different calling contexts, and the predictability of the code is lower.\n\n\n\n\n\n\n\n\n\nQ: How does R find a variable? &gt; R replies: “First, I look if I have it. If not, I go to my birthplace to find it.”\nQ: How does SAS find a variable? &gt; SAS replies: “First, I look if I have it. If not, I go to where I was called from to find it.”"
  },
  {
    "objectID": "r-environment-slides.html#function-environments",
    "href": "r-environment-slides.html#function-environments",
    "title": "R Environment Explained",
    "section": "Function Environments",
    "text": "Function Environments\n\nKey Types of Function Environments\n\nEnclosing Environment / Closure Environment / Definition Environment\n\nFound with: environment(my_function)\n\nExecution Environment\n\nFound with: environment()\n\nCalling Environment\n\nFound with: parent.frame()\n\n\n\n\nDefinition Environment (Enclosing/Definition Environment)\nA function in R is not merely a piece of code; it is a closure, which encapsulates the function body and its definition environment.\n\nWhat it is: The environment where the function was created. This environment is permanently bound to the function object.\nHow to get it: environment(my_function)\nPurpose: It is the core of lexical scoping. When a function executes and encounters a free variable (non-parameter, non-local variable), R first looks for it in the function’s definition environment.\n\n\n\nExecution Environment\n\nWhat it is: Every time a function is called, R creates a new, temporary environment for that specific call.\nContents:\n\nThe function’s formal arguments (parameters) are bound and created in this environment.\nVariables created using &lt;- or = inside the function body (local variables) are also stored in this environment.\n\nParent Environment: The parent environment of the execution environment is the function’s definition environment. This is a key connection point for lexical scoping.\nLifecycle: The environment is created when the function starts, and it is usually destroyed after the function finishes execution (unless there are other references, such as the definition environment of an inner function).\nHow to get it (inside the function): environment() or rlang::current_env().\nExample: (The Example itself is missing from the image, but the heading is there.)\n\n\n\nCalling Environment\n\nWhat it is: The environment where the code that initiated the function call resides when the function is called.\nHow to get it (inside the function): parent.frame() or rlang::caller_env().\nPurpose:\n\nPrimarily used for Non-Standard Evaluation (NSE), where a function might need to know in which context it was called in order to interpret parameters or perform operations within that context.\nFor Example, the subset() function needs to find the data frame in its calling environment and interpret the conditional expression within the context of that data frame.\neval(expression, envir = parent.frame()) will evaluate an expression in the calling environment.\n\nExample: (The Example itself is missing from the image, but the heading is there.)\n\n\n\nFunction Environments Example\ntest_fun_env_01 &lt;- function() {\n    cat(\"Executing environment: \")\n    print(environment())\n    cat(\"Enclosing environment: \")\n    print(parent.env(environment()))\n    cat(\"Calling environment: \")\n    print(parent.frame())\n}\ntest_fun_env_01()\n\n\ntest_fun_env_01 &lt;- function() {\n    cat(\"[test_fun_env_01] Executing in \")\n    print(environment())\n    cat(\"[test_fun_env_01] Enclosed by \")\n    print(parent.env(environment()))\n    cat(\"[test_fun_env_01] Calling from \")\n    print(parent.frame())\n    test_fun_env_02 &lt;- function() {\n        cat(\"[test_fun_env_02] Executing in \")\n        print(environment())\n        cat(\"[test_fun_env_02] Enclosed by \")\n        print(parent.env(environment()))\n        cat(\"[test_fun_env_02] Calling from \")\n        print(parent.frame())\n    }\n    test_fun_env_03 &lt;- function() {\n        cat(\"[test_fun_env_03] Executing in \")\n        print(environment())\n        cat(\"[test_fun_env_03] Enclosed by \")\n        print(parent.env(environment()))\n        cat(\"[test_fun_env_03] Calling from \")\n        print(parent.frame())\n        test_fun_env_02()\n    }\n    test_fun_env_03()\n}\n\ntest_fun_env_01()"
  },
  {
    "objectID": "r-environment-slides.html#lexical-scoping-in-action-standard-evaluation",
    "href": "r-environment-slides.html#lexical-scoping-in-action-standard-evaluation",
    "title": "R Environment Explained",
    "section": "Lexical Scoping in Action (Standard Evaluation)",
    "text": "Lexical Scoping in Action (Standard Evaluation)\nA variable’s scope is determined by its location in the source code (i.e., where it was defined), rather than by how or where the function is called (dynamic scoping). A function “remembers” the environment in which it was defined. Regardless of where the function is called, its path for looking up free variables always starts from its defining environment and proceeds upward.\n\nCore Rules\n\nLocal Lookup: When a function needs the value of a variable, it first looks within its own execution environment (local variables and parameters).\nUpward Lookup: If the variable isn’t found in its execution environment, it then looks in the environment where the function was defined.\nContinue Upward: If still not found in the defining environment, it continues to look in the defining environment’s parent environment, and so on, following the chain of environments all the way up to the global environment, and finally to the empty environment.\n\n\n\nFor Top-Level Interactive Commands (The search() path)\nWhen you type a command directly into the R console, you are operating in the Global Environment (.GlobalEnv). The lookup process follows the search path.\n\nFirst, look in the current environment (.GlobalEnv). This is your main workspace where objects you create are stored.\nIf not found, then look sequentially along the search path. You can view this path at any time by running search(). A typical path includes:\n\n.GlobalEnv: Your workspace.\nAttached packages: Environments for each loaded package (e.g., package:dplyr, package:ggplot2, package:stats). Crucially, they are listed in reverse order of attachment, meaning the most recently loaded package is searched first.\nAutoloads: A special environment R uses to find and load objects from packages that are not yet fully loaded into memory (lazy loading).\npackage:base: The essential R environment containing core functions (c, list, sum, etc.) and objects. This is a parent to most other environments.\nemptyenv(): The empty environment. It has no parent and contains no objects. It serves as the definitive termination point for the search. If a name is not found by the time the search reaches the empty environment, it does not exist, and an error is thrown.\n\n\n\n\nFor Names Referenced Inside a Function (The Lexical Path)\n\nFirst, look in the function’s execution environment. When a function is called, R creates a new, temporary environment for it. This execution environment stores:\n\nThe values of the function’s parameters.\nAny local variables created within the function body (e.g., using &lt;- or =).\n\nIf not found, then look in the function’s defining (enclosing) environment.\n\nThis is the most critical rule of lexical scoping. Every function in R has a “birth certificate”—a reference to the environment in which it was created. This is its defining environment. This link is permanent. As the image correctly emphasizes, the search is governed not by how or where the function is called (dynamic scoping) but by where it was defined.\n\nIf still not found, then look in the parent environment of the defining environment, and so on.\nThe search now proceeds up the “ancestor” chain of the function’s defining environment, moving from parent to parent.\nThis chain eventually reaches the global environment and the rest of the search() path (e.g., package:base), finally reaching the empty environment. If the name is not found before the empty environment, R will report: “object ‘…’ not found.”\n\n\n\nLexical Scoping Example\ny &lt;- 10\ntest_func_lex_scop_01 &lt;- function(x) {\n    x + y \n}\n\ntest_func_lex_scop_02 &lt;- function() {\n    y &lt;- 100 \n    test_func_lex_scop_01(5)     \n}\n\ntest_func_lex_scop_02()\n\ntest_func_objects_01 &lt;- function(){\n    y &lt;- 20\n    function(p = y){\n        print(p)\n        y &lt;-200\n    }\n}\n\ny&lt;- 2 \ng_01&lt;- test_func_objects_01()\ng_01()\n\ntest_func_objects_02 &lt;- function(){\n    y &lt;- 20\n    function(p = y){\n        y &lt;-200\n        print(p)\n    }\n}\ny&lt;- 2 \ng_02&lt;- test_func_objects_02()\ng_02()\ng_02(p = y)\n\n\n\n\n“Masking”: The First Find Wins\n\nThe environment chain is a one-way street. Once R finds a name, the search stops immediately.\nPrinciple: An object in an inner (or earlier-searched) environment will “mask” (or hide) an object with the same name in an outer (or later-searched) environment.\nExample: dplyr::filter vs. stats::filter:\n\nThe stats package is loaded by default. It contains a function named filter.\nIf you then load dplyr with library(dplyr), its environment is placed earlier on the search path than the stats environment.\nWhen you call filter(), R starts down the search path, finds filter in package:dplyr first, and stops. It never reaches the filter function in package:stats.\n\nTo bypass masking, you can use the :: operator to be explicit (e.g., stats::filter() or dplyr::filter()).\n\n\n\nThe inherits Parameter: Fine-Grained Control\nR provides tools like exists() and get() that allow you to control the scope of the search using the inherits parameter.\n\nexists(\"x\", inherits = TRUE) (the default): Checks if x exists in the current environment or any of its ancestor environments. This mimics the full lexical lookup behavior.\nexists(\"x\", inherits = FALSE): Checks for x only in the current environment. It will return FALSE even if x exists in a parent environment.\nget(\"x\", inherits = TRUE): Retrieves the value of x, searching upwards through the environment chain.\n\n\n\nThe Super Assignment Operator: &lt;&lt;-\nWhile the standard assignment &lt;- creates or modifies a variable in the current environment, the super assignment operator &lt;&lt;- works differently. It modifies a variable in a parent environment. It traverses up the environment chain until it finds the first existing variable with that name and modifies it. If it reaches the global environment without finding the variable, it will create it there. This operator breaks the self-contained nature of functions and should be used with extreme caution, as it can make code very difficult to debug.\n\n\nThe Super Assignment Operator &lt;&lt;- Example\na &lt;-10\ntest_func_01 &lt;- function(){\n    a&lt;&lt;-20\n    y&lt;&lt;-20\n}\nprint(a)\ntest_func_01()\nprint(y)\nprint(a)\nenv &lt;- new.env()\nenv$a &lt;- 5\nenvironment(test_func_01)\nenvironment(test_func_01) &lt;- env\ntest_func_01()\nprint(env$a)"
  },
  {
    "objectID": "r-environment-slides.html#dynamic-scoping-and-non-standard-evaluation",
    "href": "r-environment-slides.html#dynamic-scoping-and-non-standard-evaluation",
    "title": "R Environment Explained",
    "section": "Dynamic Scoping (and Non-Standard Evaluation)",
    "text": "Dynamic Scoping (and Non-Standard Evaluation)\nDynamic scoping is the direct opposite of lexical scoping. Its core principle is that the value of a free variable inside a function is resolved by searching in the environment where the function was called (the calling environment), not where it was defined.\nIn other words, a function no longer “remembers its birthplace” (its defining environment). Instead, it “adapts to its surroundings.” The search path for variables follows the call stack—the sequence of function calls that led to the current point of execution—rather than the static chain of parent environments.\n\n\nDynamic Search (Non-Standard Evaluation) Example\nx &lt;- 1:10\nx[3:(length(x) -5)]\n\ntest_func_dy_sear_01 &lt;- function(x, range) {\n    range &lt;- substitute(range)\n    selector &lt;- eval(range, list(. =length(x)))\n    x[selector]\n}\n\ntest_func_dy_sear_01(x, 3:(. -5))\n\ntest_func_dy_sear_02 &lt;- function(x, n) {\n    test_func_dy_sear_01(x, (n+1):(. -n))\n}\n\ntest_func_dy_sear_02(x, 3)\n\ntest_func_dy_sear_03 &lt;- function(x, range) {\n    range &lt;- substitute(range)\n    selector &lt;- eval(range, list(. =length(x)), parent.frame())\n    x[selector]\n}\n\ntest_func_dy_sear_03 &lt;- function(x, range, env = parent.frame()) {\n    range_expr &lt;- substitute(range)\n    selector &lt;- eval(range_expr, list(. = length(x)), env)\n    x[selector]\n}\n\ntest_func_dy_sear_03 &lt;- function(x, range) {\n    range &lt;- substitute(range)\n    env &lt;-  parent.frame()\n    selector &lt;- eval(range, list(. =length(x)),env)\n    x[selector]\n}\n\ntest_func_dy_sear_04 &lt;- function(x, n) {\n    test_func_dy_sear_03(x, (n+1):(. -n))\n}\nx &lt;- 1:10\ntest_func_dy_sear_04(x, 3)\n\n\n\nThe Essence of NSE\nThe core idea of dynamic scoping—interpreting code within a special, caller-provided data environment—is the foundation of Non-Standard Evaluation (NSE) in R. The essence is about reconstructing the environmental search chain.\n\n\nComparison: Lexical vs. Dynamic Scoping\n\n\n\nLexical Scoping\n\nCore Rule: Variable lookup depends on the function’s defining environment (its birthplace).\nBehavior: Predictable, stable, and modular. A function’s behavior is consistent regardless of where it’s called.\nR Implementation: The default behavior. All standard function calls follow this rule.\nPros: Code is robust, easy to reason about, and debug.\nCons: Can sometimes be verbose (e.g., always having to write data$column).\nUse Cases: Used for the vast majority of programming tasks.\n\n\n\nDynamic Scoping\n\nCore Rule: Variable lookup depends on the function’s calling environment (its execution site).\nBehavior: Flexible and context-dependent. A function’s behavior changes based on where it’s called.\nR Implementation: Must be implemented manually, typically by simulating it with eval(), substitute(), etc.\nPros: Enables writing very concise, domain-specific languages (DSLs) for tasks like data manipulation.\nCons: Can make code difficult to predict and debug due to its “magical” behavior.\nUse Cases: Non-Standard Evaluation (NSE) in packages like dplyr, ggplot2, and data.table.\n\n\n\n\n\n\nWhy Non-Standard Evaluation (NSE)?\nR needs Non-Standard Evaluation (NSE) primarily to create a more interactive, intuitive, and less verbose user experience for data analysis. It allows package developers to create Domain-Specific Languages (DSLs)—mini-languages tailored for a specific task, like data manipulation or plotting.\n\nCommon Uses of NSE\n\nInteractive Data Analysis: Allows users to directly write column names without quotes, e.g., dplyr::filter(mtcars, cyl == 6). Here, cyl is not a variable in the calling environment, but a column name that the filter function interprets in the context of mtcars.\nDomain-Specific Languages (DSL): Such as ggplot2’s aesthetic mapping aes(x = var1, y = var2).\nImplementation of (Traditional vs. Tidy Evaluation): (The rest of this point is cut off in the image).\n\n\n\nKey Benefits of NSE\n\nConciseness and Reduced Typing\n\nYou no longer need to type mtcars$cyl. The function understands that cyl and mpg refer to columns within the mtcars data frame. This is possible because filter and subset use NSE to create a “data mask,” temporarily placing the columns of the data frame “in scope.”\n\nEnhanced Readability\n\nThe code now reads almost like an English sentence:\n\n“Subset mtcars where cyl equals 6 and mpg is greater than 20.”\n“Filter mtcars where cyl equals 6 and mpg is greater than 20.”\n\nThis drastically lowers the cognitive barrier, allowing users to focus on the what (the analytical question) rather than the how (the programming syntax).\n\nCreation of Domain-Specific Languages (DSLs)\n\nNSE is the engine that powers the DSLs that have made R famous.\ndplyr’s Grammar of Data Manipulation: Verbs like filter, mutate, summarise, group_by, and arrange form a consistent and intuitive language for transforming data.\nggplot2’s Grammar of Graphics: The aes() function is a prime Example of NSE. You write aes(x = mpg, y = wt) instead of the much more verbose aes(x = my_data$mpg, y = my_data$wt). It allows you to describe the aesthetic mappings of your plot in an abstract way."
  },
  {
    "objectID": "r-environment-slides.html#ewise-r-environment",
    "href": "r-environment-slides.html#ewise-r-environment",
    "title": "R Environment Explained",
    "section": "eWise-R Environment",
    "text": "eWise-R Environment\n\neWise - R Programming\n\nTo locate the R profile file, you can use:\nfile.path(path.expand(\"~\"), \".Rprofile\")\nKey Scripts:\n\nalloc_ana.R: system level, readonly\nalloc_cust.R: user level, write\nalloc_install.R: batch run to install packages\n\n\nNote on a new triplet:\nIf a new library without dso.SDTM is needed, reset the repos option, or use alloc_install.R."
  },
  {
    "objectID": "r-environment-slides.html#homework-and-thinking-points",
    "href": "r-environment-slides.html#homework-and-thinking-points",
    "title": "R Environment Explained",
    "section": "Homework and Thinking Points",
    "text": "Homework and Thinking Points\n\nHow do functions find global objects?\nThe core question is: How does a function find objects in the .GlobalEnv when it’s running? This relates to the concept of the search path, which is part of a function’s lexical scope chain.\n(The following code snippet provides context for this question.)\n\n\n\nCode snippet for homework discussion\n\n\n\n\nRe-implementing with() in Base R\n\nTask 1: Write a function that behaves like the with() function in base R.\nTask 2: Update this function so it can be called correctly inside another function, without using any external libraries.\n\n\n\nUpdating a Standard Project Function\n\nScenario: In a study, if the standard ERIS R function does not meet my needs, what is the proper procedure to update this function specifically for my project without affecting others?\n\n\n\nImplementing Dynamic Scoping in R\n\nChallenge: How can you implement dynamic scoping for variable lookup in an R function, to mimic the behavior of a SAS macro? The function should search for external variables along the function call stack.\nFollow-up: Are there other ways in R to achieve the same lookup behavior as a SAS macro?\n\n\n\nUnderstanding Tidy Evaluation Errors\n\nQuestion: Why does the following code produce an error?\n\n\n\nwhy error?\n  my_mean &lt;- function(data, var1, var2) {\n    dplyr::summarise(data, mean(var1 + var2))\n  }\n\n  my_mean(mtcars, cyl, am)\n\n\n\n\nLearning\n\nEnvironment management\nProject management\nR Version management and Github Interaction\nPackage management"
  }
]